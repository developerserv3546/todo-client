{"version":3,"sources":["components/TodoForm.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","useState","name","setName","description","setDescription","className","onChange","e","target","value","type","placeholder","onClick","createTask","disabled","trim","TodoItem","isNameEditMode","setNameEditMode","isDescriptionEditMode","setDescriptionEditMode","task","show","setShow","Modal","onHide","aria-labelledby","Header","closeButton","Title","id","Body","deleteTask","_id","done","updateTask","updateTaskStatus","TodoList","tasks","map","el","App","alert","useAlert","setTasks","useEffect","getAllTasks","axios","method","url","then","res","data","catch","error","toString","Boolean","window","location","hostname","match","defaults","baseURL","ReactDOM","render","StrictMode","template","AlertTemplate","position","timeout","offset","transition","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"sRAEe,SAASA,EAASC,GAAQ,IAAD,EAEZC,mBAAS,IAFG,mBAE7BC,EAF6B,KAEvBC,EAFuB,OAGEF,mBAAS,IAHX,mBAG7BG,EAH6B,KAGhBC,EAHgB,KAmBpC,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,cACX,uCACA,2BAAOC,SAlBE,SAAAC,GACjBL,EAAQK,EAAEC,OAAOC,QAiBsBC,KAAK,OAAOL,UAAU,eAAeM,YAAY,gBACzEF,MAAOR,KAElB,yBAAKI,UAAU,cACX,8CACA,2BAAOC,SAnBS,SAAAC,GACxBH,EAAeG,EAAEC,OAAOC,QAkBsBC,KAAK,OAAOL,UAAU,eACrDM,YAAY,uBAAuBF,MAAON,KAErD,4BAAQS,QAAS,kBAjBrBb,EAAMc,WAAWZ,EAAME,GACvBD,EAAQ,SACRE,EAAe,KAe6BM,KAAK,SAASL,UAAU,2BACxDS,SAA0B,KAAhBb,EAAKc,QAAwC,KAAvBZ,EAAYY,QADpD,W,YC9BG,SAASC,EAASjB,GAAQ,IAAD,EAEMC,oBAAS,GAFf,mBAE7BiB,EAF6B,KAEbC,EAFa,OAGoBlB,oBAAS,GAH7B,mBAG7BmB,EAH6B,KAGNC,EAHM,OAIZpB,mBAASD,EAAMsB,KAAKpB,MAJR,mBAI7BA,EAJ6B,KAIvBC,EAJuB,OAKEF,mBAASD,EAAMsB,KAAKlB,aALtB,mBAK7BA,EAL6B,KAKhBC,EALgB,OAMZJ,oBAAS,GANG,mBAM7BsB,EAN6B,KAMvBC,EANuB,KAkDpC,OACI,oCACI,kBAACC,EAAA,EAAD,CACIF,KAAMA,EACNG,OAAQ,kBAAMF,GAAQ,IACtBG,kBAAgB,gCAEhB,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACrB,kBAACJ,EAAA,EAAMK,MAAP,CAAaC,GAAG,gCAAhB,+CAIJ,kBAACN,EAAA,EAAMO,KAAP,KACI,2BAAG,yCAAH,IAA2BhC,EAAMsB,KAAKpB,MACtC,2BAAG,gDAAH,IAAkCF,EAAMsB,KAAKlB,aAC7C,yBAAKE,UAAU,oBACX,4BAAQK,KAAK,SAASE,QAAS,kBApB/Cb,EAAMiC,WAAWjC,EAAMsB,KAAKY,UAC5BV,GAAQ,IAoBgBlB,UAAU,iCADlB,UAGA,4BAAQO,QAAS,kBAAMW,GAAQ,IAAQb,KAAK,SACpCL,UAAU,4BADlB,aAOZ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKO,QAAS,WArErBK,GACDC,GAAgB,KAqEHD,EACG,oCAAE,uCACE,2BAAOX,SAhDd,SAAAC,GACjBL,EAAQK,EAAEC,OAAOC,QA+CsCC,KAAK,OAAOL,UAAU,oBAC9CM,YAAY,OAAOF,MAAOR,IAFrC,KAGA,wBAAII,UAAU,cAAcN,EAAMsB,KAAKa,KAAO,8CAAe,8CAA7D,IAA6EnC,EAAMsB,KAAKpB,KAAxF,OAIR,yBAAKW,QAAS,WAxErBO,GACDC,GAAuB,KAwEVD,EACG,oCAAE,8CACE,2BAAOb,SArDP,SAAAC,GACxBH,EAAeG,EAAEC,OAAOC,QAoDsCC,KAAK,OAAOL,UAAU,oBACrDM,YAAY,cACZF,MAAON,KAClB,uBAAGE,UAAU,aAAaN,EAAMsB,KAAKlB,cAG7C,yBAAKE,UAAU,oCACVY,GAAkBE,EACf,6BACI,4BAAQP,QAAS,kBAvEzCb,EAAMoC,WAAWpC,EAAMsB,KAAKY,IAAKhC,EAAME,GACvCe,GAAgB,QAChBE,GAAuB,IAqEuCV,KAAK,SACnCL,UAAU,iCADlB,QAGA,4BAAQO,QAAS,kBAjFzCM,GAAgB,GAChBE,GAAuB,GACvBlB,EAAQH,EAAMsB,KAAKpB,WACnBG,EAAeL,EAAMsB,KAAKlB,cA8EsCO,KAAK,SACrCL,UAAU,4BADlB,WAKJ,6BACI,4BAAQK,KAAK,SACLE,QAAS,kBAAMb,EAAMqC,iBAAiBrC,EAAMsB,KAAKY,KAAMlC,EAAMsB,KAAKa,OAClE7B,UAAU,iCAAiCN,EAAMsB,KAAKa,KAAO,SAAW,QAChF,4BAAQtB,QAAS,WArEzCW,GAAQ,IAqEwDb,KAAK,SACrCL,UAAU,4BADlB,eC/GjB,SAASgC,EAAStC,GAC7B,OACI,oCAEQA,EAAMuC,MAAMC,KAAI,SAAAC,GAAE,OAAI,kBAACxB,EAAD,CAAUK,KAAMmB,EACNL,WAAYpC,EAAMoC,WAClBC,iBAAkBrC,EAAMqC,iBACxBJ,WAAYjC,EAAMiC,iB,YCiFnDS,MApFf,WAEI,IAAMC,EAAQC,cAFH,EAGe3C,mBAAS,IAHxB,mBAGJsC,EAHI,KAGGM,EAHH,KAKXC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAc,WAChBC,IAAM,CACFC,OAAQ,MACRC,IAAK,SACNC,MAAK,SAAAC,GACJP,EAASO,EAAIC,SACdC,OAAM,SAAAC,GAAK,OAAIZ,EAAMpB,KAAKgC,EAAMC,WAAY,CAAC7C,KAAM,cAsD1D,OACI,yBAAKL,UAAU,QACX,6BACI,wBAAIA,UAAU,QAAd,mBACA,kBAACP,EAAD,CAAUe,WA5BH,SAACZ,EAAME,GACtB4C,IAAM,CACFC,OAAQ,OACRC,IAAI,OACJG,KAAM,CACFnD,OACAE,iBAEL+C,MAAK,SAAAC,GACJL,IACAJ,EAAMpB,KAAK,YAAc6B,EAAIC,KAAM,CAAC1C,KAAM,eAC3C2C,OAAM,SAAAC,GAAK,OAAIZ,EAAMpB,KAAKgC,EAAMC,WAAY,CAAC7C,KAAM,iBAmBlD,wBAAIL,UAAU,OAAd,SACA,kBAACgC,EAAD,CAAUC,MAAOA,EACPH,WA3DC,SAACL,EAAI7B,EAAME,GAC1B4C,IAAM,CACFC,OAAQ,QACRC,IAAI,QAAD,OAAUnB,GACbsB,KAAM,CACFnD,OACAE,iBAEL+C,MAAK,SAAAC,GACJL,IACAJ,EAAMpB,KAAK,YAAc6B,EAAIC,KAAM,CAAC1C,KAAM,eAC3C2C,OAAM,SAAAC,GAAK,OAAIZ,EAAMpB,KAAKgC,EAAMC,WAAY,CAAC7C,KAAM,cAiDxC0B,iBA9CO,SAACN,EAAII,GAC1Ba,IAAM,CACFC,OAAQ,MACRC,IAAI,QAAD,OAAUnB,GACbsB,KAAM,CACFlB,UAELgB,MAAK,SAAAC,GACJL,IACAJ,EAAMpB,KAAK,YAAc6B,EAAIC,KAAM,CAAC1C,KAAM,eAC3C2C,OAAM,SAAAC,GAAK,OAAIZ,EAAMpB,KAAKgC,EAAMC,WAAY,CAAC7C,KAAM,cAqCxCsB,WApBC,SAAAF,GACfiB,IAAM,CACFC,OAAQ,SACRC,IAAI,QAAD,OAAUnB,KACdoB,MAAK,SAAAC,GACJL,IACAJ,EAAMpB,KAAK,YAAc6B,EAAIC,KAAM,CAAC1C,KAAM,eAC3C2C,OAAM,SAAAC,GAAK,OAAIZ,EAAMpB,KAAKgC,EAAMC,WAAY,CAAC7C,KAAM,kB,QC7D1C8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNb,IAAMc,SAASC,QAAU,yBASzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,eAAeC,SAAUC,KATf,CACZC,SAAU,YACVC,QAAS,IACTC,OAAQ,OACRC,WAAY,SAMZ,kBAAC,EAAD,QAGFC,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACLyB,QAAQzB,MAAMA,EAAM0B,c","file":"static/js/main.a31583c1.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport default function TodoForm(props) {\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const onNameChange = e => {\n        setName(e.target.value)\n    }\n\n    const onDescriptionChange = e => {\n        setDescription(e.target.value)\n    }\n\n    const onSubmitClick = () => {\n        props.createTask(name, description);\n        setName('');\n        setDescription('');\n    }\n\n    return (\n        <div className=\"mx-2 my-4\">\n            <div className=\"form-group\">\n                <label>Name</label>\n                <input onChange={onNameChange} type=\"text\" className=\"form-control\" placeholder=\"Enter Name...\"\n                       value={name}/>\n            </div>\n            <div className=\"form-group\">\n                <label>Description</label>\n                <input onChange={onDescriptionChange} type=\"text\" className=\"form-control\"\n                       placeholder=\"Enter Description...\" value={description}/>\n            </div>\n            <button onClick={() => onSubmitClick()} type=\"submit\" className=\"btn btn-secondary mw-120\"\n                    disabled={name.trim() === '' || description.trim() === ''}>Submit\n            </button>\n        </div>\n    );\n};","import React, {useState} from \"react\";\nimport {Modal} from \"react-bootstrap\";\n\nexport default function TodoItem(props) {\n\n    const [isNameEditMode, setNameEditMode] = useState(false);\n    const [isDescriptionEditMode, setDescriptionEditMode] = useState(false);\n    const [name, setName] = useState(props.task.name);\n    const [description, setDescription] = useState(props.task.description);\n    const [show, setShow] = useState(false);\n\n    const onNameClick = () => {\n        if (!isNameEditMode) {\n            setNameEditMode(true)\n        }\n    }\n\n    const onDescriptionClick = () => {\n        if (!isDescriptionEditMode) {\n            setDescriptionEditMode(true)\n        }\n    }\n\n    const onCancelClick = () => {\n        setNameEditMode(false);\n        setDescriptionEditMode(false);\n        setName(props.task.name);\n        setDescription(props.task.description);\n    }\n\n    const onSaveClick = () => {\n        props.updateTask(props.task._id, name, description);\n        setNameEditMode(false);\n        setDescriptionEditMode(false);\n    }\n\n    const onNameChange = e => {\n        setName(e.target.value)\n    }\n\n    const onDescriptionChange = e => {\n        setDescription(e.target.value)\n    }\n\n    const onDeleteClick = () => {\n        setShow(true);\n    }\n\n    const onConfirmDeleteClick = () => {\n        props.deleteTask(props.task._id);\n        setShow(false)\n    }\n\n    return (\n        <>\n            <Modal\n                show={show}\n                onHide={() => setShow(false)}\n                aria-labelledby=\"example-modal-sizes-title-sm\"\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">\n                        Are you sure you want to delete this task?\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p><strong>Name:</strong> {props.task.name}</p>\n                    <p><strong>Description:</strong> {props.task.description}</p>\n                    <div className=\"text-center my-2\">\n                        <button type=\"button\" onClick={() => onConfirmDeleteClick()}\n                                className=\"btn btn-secondary mr-2 mw-120\">Delete\n                        </button>\n                        <button onClick={() => setShow(false)} type=\"button\"\n                                className=\"btn btn-secondary mw-120\">Cancel\n                        </button>\n                    </div>\n                </Modal.Body>\n            </Modal>\n\n            <div className=\"card m-2\">\n                <div className=\"card-body\">\n                    <div onClick={() => onNameClick()}>\n                        {isNameEditMode ?\n                            <><label>Name</label>\n                                <input onChange={onNameChange} type=\"text\" className=\"form-control mb-2\"\n                                       placeholder=\"Name\" value={name}/> </> :\n                            <h5 className=\"card-title\">{props.task.done ? <>&#9989;</> : <>&#10071;</>} {props.task.name}  </h5>\n\n                        }\n                    </div>\n                    <div onClick={() => onDescriptionClick()}>\n                        {isDescriptionEditMode ?\n                            <><label>Description</label>\n                                <input onChange={onDescriptionChange} type=\"text\" className=\"form-control mb-2\"\n                                       placeholder=\"Description\"\n                                       value={description}/></> :\n                            <p className=\"card-text\">{props.task.description}</p>\n                        }\n                    </div>\n                    <div className=\"container-fluid w-100 text-right\">\n                        {isNameEditMode || isDescriptionEditMode ?\n                            <div>\n                                <button onClick={() => onSaveClick()} type=\"button\"\n                                        className=\"btn btn-secondary mr-2 mw-120\">Save\n                                </button>\n                                <button onClick={() => onCancelClick()} type=\"button\"\n                                        className=\"btn btn-secondary mw-120\">Cancel\n                                </button>\n                            </div>\n                            :\n                            <div>\n                                <button type=\"button\"\n                                        onClick={() => props.updateTaskStatus(props.task._id, !props.task.done)}\n                                        className=\"btn btn-secondary mr-2 mw-120\">{props.task.done ? 'Undone' : 'Done'}</button>\n                                <button onClick={() => onDeleteClick()} type=\"button\"\n                                        className=\"btn btn-secondary mw-120\">Delete\n                                </button>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nexport default function TodoList(props) {\n    return (\n        <>\n            {\n                props.tasks.map(el => <TodoItem task={el}\n                                                updateTask={props.updateTask}\n                                                updateTaskStatus={props.updateTaskStatus}\n                                                deleteTask={props.deleteTask}/>)\n            }\n        </>\n    );\n};","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport {useAlert} from 'react-alert';\n\nfunction App() {\n\n    const alert = useAlert();\n    const [tasks, setTasks] = useState([]);\n\n    useEffect(() => {\n        getAllTasks();\n    }, [])\n\n    const getAllTasks = () => {\n        axios({\n            method: 'GET',\n            url: 'todo',\n        }).then(res => {\n            setTasks(res.data)\n        }).catch(error => alert.show(error.toString(), {type: 'error'}));\n    };\n\n    const updateTask = (id, name, description) => {\n        axios({\n            method: 'PATCH',\n            url: `todo/${id}`,\n            data: {\n                name,\n                description\n            }\n        }).then(res => {\n            getAllTasks();\n            alert.show(\"Success: \" + res.data, {type: 'success'});\n        }).catch(error => alert.show(error.toString(), {type: 'error'}));\n    };\n\n    const updateTaskStatus = (id, done) => {\n        axios({\n            method: 'PUT',\n            url: `todo/${id}`,\n            data: {\n                done\n            }\n        }).then(res => {\n            getAllTasks();\n            alert.show(\"Success: \" + res.data, {type: 'success'});\n        }).catch(error => alert.show(error.toString(), {type: 'error'}));\n    };\n\n    const createTask = (name, description) => {\n        axios({\n            method: 'POST',\n            url: `todo`,\n            data: {\n                name,\n                description\n            }\n        }).then(res => {\n            getAllTasks();\n            alert.show(\"Success: \" + res.data, {type: 'success'});\n        }).catch(error => alert.show(error.toString(), {type: 'error'}));\n    };\n\n    const deleteTask = id => {\n        axios({\n            method: 'DELETE',\n            url: `todo/${id}`\n        }).then(res => {\n            getAllTasks();\n            alert.show(\"Success: \" + res.data, {type: 'success'});\n        }).catch(error => alert.show(error.toString(), {type: 'error'}));\n    };\n\n    return (\n        <div className=\"mt-4\">\n            <div>\n                <h2 className=\"mx-2\">Create New Task</h2>\n                <TodoForm createTask={createTask}/>\n            </div>\n            <h2 className=\"m-2\">Tasks</h2>\n            <TodoList tasks={tasks}\n                      updateTask={updateTask}\n                      updateTaskStatus={updateTaskStatus}\n                      deleteTask={deleteTask}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:5000/';\n\nconst options = {\n    position: 'top right',\n    timeout: 5000,\n    offset: '30px',\n    transition: 'fade'\n}\n\nReactDOM.render(\n  <React.StrictMode>\n      <AlertProvider template={AlertTemplate} {...options}>\n    <App />\n      </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}